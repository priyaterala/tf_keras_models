#We train a neural network model to classify images of clothing from the Fashion MNIST dataset,
#by using tf.keras, a high-level API to build and train models in TensorFlow 

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)                 =====>1.9.0
###############################################################

# import and load the data:
fashion_mnist = keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
###############################################################

#Explore the data
print(train_images.shape)		=====>(60000, 28, 28)
print(len(train_labels))		=====>60000
print(train_labels)			=====>[9 0 0 ... 3 0 5]
print(test_images.shape)		=====>(10000, 28, 28)
print(len(test_labels))		=====>10000
print(test_labels[1])		=====>2
###############################################################

#inspect the first image in the training set
plt.figure()
plt.imshow(train_images[1])
plt.colorbar()
plt.gca().grid(False)		=====>prints an image in training set
###############################################################

#Preprocess the data
train_images = train_images / 255.0

test_images = test_images / 255.0
###############################################################

#Display the first 25 images from the training set and display the class name below each image
import matplotlib.pyplot as plt
%matplotlib inline

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid('off')
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])	
				                        ======>prints first 25 images in the training set
###############################################################

#Build the model
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation=tf.nn.relu),
    keras.layers.Dense(10, activation=tf.nn.softmax)
])

#Compile the model
model.compile(optimizer=tf.train.AdamOptimizer(), 
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#Train the model
model.fit(train_images, train_labels, epochs=5)
#Evaluate accuracy

test_loss, test_acc = model.evaluate(test_images, test_labels)

print('Test accuracy:', test_acc)		======>Test accuracy: 0.8197
###############################################################

#Make predictions
predictions = model.predict(test_images)
print(predictions[1])			          ======>[4.01488069e-04 7.87455610e-06 8.73868406e-01 9.42020270e-05
                                             1.61872003e-02 7.70661046e-09 1.09302744e-01 5.68063391e-13
                                            1.38100731e-04 1.22525190e-09]
print(np.argmax(predictions[1]))		======>2
print(test_labels[1])			          ======>2
###############################################################

#model.predict returns a list of lists, one for each image in the batch of data. 
#To predict only one image in the batch:
prediction = predictions[0]
np.argmax(prediction)			======>2
###############################################################
